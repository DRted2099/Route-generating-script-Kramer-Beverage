clc;
clear;
close all;

% Import data from spreadsheet
% Script for importing data from the following spreadsheet:
%
%    Workbook: /MATLAB Drive/Published/Internship/Routing_GitHub.xlsx
%    Worksheet: Sheet1
%
% Auto-generated by MATLAB on 22-Feb-2023 21:05:41

% Set up the Import Options and import the data
opts = spreadsheetImportOptions("NumVariables", 9);

% Specify sheet and range
opts.Sheet = "Sheet1";
opts.DataRange = "A3:I372";

% Specify column names and types
opts.VariableNames = ["DeliveryDriverName", "CusKey", "CusName", "ShipCity", "OrderNumber", "Latitude", "Longitude", "Cases", "Ticket_"];
opts.VariableTypes = ["categorical", "string", "string", "categorical", "string", "string", "string", "double", "string"];

% Specify variable properties
opts = setvaropts(opts, ["CusKey", "CusName", "OrderNumber", "Latitude", "Longitude", "Ticket_"], "WhitespaceRule", "preserve");
opts = setvaropts(opts, ["DeliveryDriverName", "CusKey", "CusName", "ShipCity", "OrderNumber", "Latitude", "Longitude", "Ticket_"], "EmptyFieldRule", "auto");

% Import the data
SalesOrder = readtable("/MATLAB Drive/Published/Internship/Routing_GitHub.xlsx", opts, "UseExcel", false);


% Clear temporary variables
clear opts

limit_case = 800;

SalesOrder.Latitude = str2double(SalesOrder.Latitude);
SalesOrder.Longitude = str2double(SalesOrder.Longitude);

S1 = SalesOrder(:,[3 4 6:8]);

S1.CusName = categorical(S1.CusName);

Cus = categories(S1.CusName);
Cus = categorical(Cus);

S2 = S1;
S2.Cases = max(0,S2.Cases);
zero_index = find(S2.Cases == 0);
S2(zero_index,:) = [];


for i = 1:size(Cus,1)
    
    Cases1(i) = sum(S2.Cases(find(S2.CusName == Cus(i))));

end

 
Cases1 = Cases1';

[~, ia, ~] = unique(S1.CusName);

S2 = S1(ia,:);

S2.Cases = Cases1;

S2_1 = S2;


for i = 1:size(S2,1)
    for j = 1:size(S2)

            Dist(i,j) = distance(S2.Latitude(i),S2.Longitude(i),...
            S2.Latitude(j), S2.Longitude(j));  

    end
end

for i = 1:size(Dist,1)
    for j = 1:size(Dist)
        if Dist(i,j) == Dist(j,i)
        
            Dist(j,i) = 0;
        
        end
    end
end

Dist(Dist==0) = NaN;
Dist1 = Dist;

Dist = deg2km(Dist);
Dist1 = deg2km(Dist1);

% Change this to home/origin co-ordinates

K_Orig = [122, 24];

for i = 1:size(S2,1)

   CusName(i) = S2.CusName(i);
   Orig(i) = deg2km(distance(K_Orig(1),K_Orig(2),S2.Latitude(i), S2.Longitude(i))); 
   Cases(i) = S2.Cases(i);

end

CusName = CusName';
Orig = Orig';
Cases = Cases';

Kdist = table(CusName, Cases, Orig);
Kdist1 = Kdist;
Kdist = sortrows(Kdist,'Orig');

y = all(isnan(Kdist.Orig),'all');

VarNames = {'CusName';'ShipCity';'Cases';'Orig'};
Vartype = {'string';'string';'double';'double'};

RR = table('Size', [1,4], 'VariableTypes', Vartype, 'VariableNames', VarNames);

%%

l_temp = 0;
i = 1;

while check_zero(S2.Cases) && check_zero(Kdist.Cases)

    if l_temp == 0 
        
        [k1,idx] = min(Kdist.Orig);

        idx1 = find(S2.CusName == Kdist.CusName(idx));
        
        l_temp = Kdist.Cases(idx);

        if l_temp >= limit_case

            RR.CusName(i) = S2.CusName(idx1);
            RR.ShipCity(i) = S2.ShipCity(idx1);
            RR.Cases(i) = limit_case;
            RR.Orig(i) = k1;
            
            Kdist.Cases(idx) = l_temp - limit_case;
            S2.Cases(idx1) = Kdist.Cases(idx);
            
            l_temp = 0;

            i = i+1;

            RR.CusName(i) = "NEXT TRUCK";
            RR.ShipCity(i) = "NEXT TRUCK";
            RR.Cases(i) = 0;
            RR.Orig(i) = 0;

        else
    
            RR.CusName(i) = Kdist.CusName(idx);
            RR.ShipCity(i) = S2.ShipCity(idx1);
            RR.Cases(i) = Kdist.Cases(idx);
            RR.Orig(i) = Kdist.Orig(idx);
            
            Kdist.Orig(idx) = NaN;
            
            Kdist.Cases(idx) = 0;
            S2.Cases(idx1) = 0;
            
        end

    else

        [v1,idxv1] = min(Dist(idx1,:),[],'omitnan');
    
        [v2,idxv2] = min(Dist(:,idx1),[],'omitnan');

        Dist(idx1,:) = NaN;
        Dist(:,idx1) = NaN;
        
        if isnan(v1) || isnan(v2)
        
            x = [v1,v2];
            x = x(~isnan(x));

            if isequal(x,v1)

                idx1 = idxv1;
                v = v1;

            else

                idx1 = idxv2;
                v = v2;

            end


        elseif v1 > v2
    
            idx1 = idxv2;
            v = v2;
    
        elseif v1 < v2
    
            idx1 = idxv1;
            v = v1;
    
        elseif v1 == v2
    
            min_case = min(S2.Cases(idxv1), S2.Cases(idxv2));

            if isequal(min_case,S2.Cases(idxv1))

                idx1 = idxv1;
                v = v1;

            else

                idx1 = idxv2;
                v = v2;

            end

        end
    
        idx = find(S2.CusName(idx1) == Kdist.CusName);

        l_temp = l_temp + S2.Cases(idx1);

        if v >= dist_limit && v > Kdist.Orig(idx)

                 l_temp = 0;
    
                RR.CusName(i) = "NEXT TRUCK";
                RR.ShipCity(i) = "NEXT TRUCK";
                RR.Cases(i) = 0;
                RR.Orig(i) = 0;

        
        elseif l_temp >= limit_case 
    
            RR.CusName(i) = S2.CusName(idx1);
            RR.ShipCity(i) = S2.ShipCity(idx1);
            RR.Cases(i) =  S2.Cases(idx1) - (l_temp - limit_case);
            RR.Orig(i) =  v;
    
            Kdist.Cases(idx) = S2.Cases(idx1) - limit_case;
            S2.Cases(idx1) = Kdist.Cases(idx);
    
            l_temp = 0;
    
            i = i+1;
    
            RR.CusName(i) = "NEXT TRUCK";
            RR.ShipCity(i) = "NEXT TRUCK";
            RR.Cases(i) = 0;
            RR.Orig(i) = 0;


        else 

            RR.CusName(i) = S2.CusName(idx1);
            RR.ShipCity(i) = S2.ShipCity(idx1);
            RR.Cases(i) =  S2.Cases(idx1);
            RR.Orig(i) =  v;

            Kdist.Cases(idx) = 0;
            S2.Cases(idx1) = Kdist.Cases(idx);

            Kdist.Orig(idx) = NaN;

        end

    end

    i = i + 1;

end

warning('off','MATLAB:xlswrite:AddSheet'); %optional
writetable(RR,'GitHub_Output.xlsx','Sheet',1);

%%

function [output] = check_zero(matrix_column)
    
    n = size(matrix_column,1);
    
    for i = 1:n
    
        if matrix_column(i) > 0
    
            temp_mat(i) = 1;
    
        else
    
             temp_mat(i) = 0;
    
        end
    
    end

    if nnz(~temp_mat) == n

        output = false;

    else

        output = true;

    end

end





